(()=>{"use strict";function e(e){console.log(e),document.querySelector("body"),document.querySelector(".container");const t=document.querySelector(".weather-name"),n=document.querySelector(".city-name"),c=document.querySelector(".temperature-number"),o=document.querySelector(".temperature-icon"),r=document.querySelector(".feels-like"),i=document.querySelector(".humidity"),a=document.querySelector(".wind-speed");t.textContent=e.weather,n.textContent=e.cityName,c.textContent=e.temperature,o.textContent="metric"===e.scale?"ºC":"ºF",r.textContent=e.feelsLike,i.textContent=e.humidity,a.textContent=e.windSpeed}async function t(e,t="metric"){try{const n=await async function(e,t){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),c=await n.json();return console.log(c),c}catch(e){return void console.log("City not found!")}}(e,t);console.log(n);const c=n.name,o=n.main.temp,r=(n.main.feels_like,n.weather[0].main),i=n.weather[0].description,a=n.main.feels_like;return{cityName:c,temperature:o,weather:r,weatherDescription:i,feelsLike:a,humidity:n.main.humidity,windSpeed:n.wind.speed,scale:t}}catch(e){return void console.log("Not found")}}const n=document.querySelector(".search-weather"),c=document.querySelector("input"),o=document.querySelector(".change-scale");n.addEventListener("click",(async()=>{try{e(await t(c.value))}catch(e){}})),o.addEventListener("click",(async()=>{const n=document.querySelector(".temperature-icon"),c=document.querySelector(".city-name");if(n&&c){const o="ºC"===n.textContent?"imperial":"metric";e(await t(c.textContent,o))}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQ08sU0FBU0EsRUFBcUJDLEdBQ2pDQyxRQUFRQyxJQUFJRixHQUNDRyxTQUFTQyxjQUFjLFFBQ2xCRCxTQUFTQyxjQUFjLGNBRHpDLE1BRU1DLEVBQVlGLFNBQVNDLGNBQWMsaUJBQ25DRSxFQUFTSCxTQUFTQyxjQUFjLGNBQ2hDRyxFQUFnQkosU0FBU0MsY0FBYyx1QkFDdkNJLEVBQWFMLFNBQVNDLGNBQWMscUJBQ3BDSyxFQUFjTixTQUFTQyxjQUFjLGVBQ3JDTSxFQUFhUCxTQUFTQyxjQUFjLGFBRXBDTyxFQUFjUixTQUFTQyxjQUFjLGVBRzNDQyxFQUFVTyxZQUFjWixFQUFjYSxRQUN0Q1AsRUFBT00sWUFBY1osRUFBY2MsU0FDbkNQLEVBQWNLLFlBQWNaLEVBQWNlLFlBQzFDUCxFQUFXSSxZQUFzQyxXQUF4QlosRUFBY2dCLE1BQXFCLEtBQU8sS0FDbkVQLEVBQVlHLFlBQWNaLEVBQWNpQixVQUN4Q1AsRUFBV0UsWUFBY1osRUFBY2tCLFNBRXZDUCxFQUFZQyxZQUFjWixFQUFjbUIsVUNuQnJDQyxlQUFlQyxFQUFZQyxFQUFLTixFQUFRLFVBQzNDLElBQ0ksTUFBTU8sUUNMUEgsZUFBZ0NFLEVBQUtOLEdBQ3hDLElBQ0ksTUFBTVEsUUFBaUJDLE1BQU0sb0RBQW9ESCxXQUFjTiw0Q0FDekZPLFFBQWFDLEVBQVNFLE9BRTVCLE9BREF6QixRQUFRQyxJQUFJcUIsR0FDTEEsRUFDVixNQUFNSSxHQUVILFlBREExQixRQUFRQyxJQUFJLG9CREZPMEIsQ0FBZ0JOLEVBQU1OLEdBQ3pDZixRQUFRQyxJQUFJcUIsR0FDWixNQUFNVCxFQUFXUyxFQUFLTSxLQUNoQmQsRUFBY1EsRUFBS08sS0FBS0MsS0FFeEJsQixHQURnQlUsRUFBS08sS0FBS0UsV0FDaEJULEVBQUtWLFFBQVEsR0FBR2lCLE1BQzFCRyxFQUFxQlYsRUFBS1YsUUFBUSxHQUFHcUIsWUFDckNqQixFQUFZTSxFQUFLTyxLQUFLRSxXQUc1QixNQUFNLENBQUNsQixTQUFBQSxFQUFVQyxZQUFBQSxFQUFhRixRQUFBQSxFQUFTb0IsbUJBQUFBLEVBQW1CaEIsVUFBQUEsRUFBVUMsU0FGbkRLLEVBQUtPLEtBQUtaLFNBRWtEQyxVQUQzREksRUFBS1ksS0FBS0MsTUFDNERwQixNQUFBQSxHQUUxRixNQUFNVyxHQUVKLFlBREExQixRQUFRQyxJQUFJLGNBS3BCLE1BQU1tQyxFQUFlbEMsU0FBU0MsY0FBYyxtQkFDdENrQyxFQUFjbkMsU0FBU0MsY0FBYyxTQUNyQ21DLEVBQW9CcEMsU0FBU0MsY0FBYyxpQkFFakRpQyxFQUFhRyxpQkFBaUIsU0FBU3BCLFVBQ25DLElBRUlyQixRQUQ2QnNCLEVBQVlpQixFQUFZRyxRQUV4RCxNQUFNZCxRQUlYWSxFQUFrQkMsaUJBQWlCLFNBQVNwQixVQUN4QyxNQUFNWixFQUFhTCxTQUFTQyxjQUFjLHFCQUNwQ3NDLEVBQWF2QyxTQUFTQyxjQUFjLGNBQzFDLEdBQUdJLEdBQWNrQyxFQUFXLENBQ3hCLE1BQU0xQixFQUFtQyxPQUEzQlIsRUFBV0ksWUFBdUIsV0FBYSxTQUU3RGIsUUFENEJzQixFQUFZcUIsRUFBVzlCLFlBQWFJLFMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10b3Atd2VhdGhlcmFwcC8uL3NyYy92aWV3L3JlbmRlclN0YXRpY0VsZW1lbnRzLmpzIiwid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL2xvZ2ljL3Byb2Nlc3NEYXRhLmpzIiwid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL2xvZ2ljL2ZldGNoV2VhdGhlckFQSS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUYWtlcyBwcm9jZXNzRGF0YSBhcyBhcmd1bWVudFxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RhdGljRWxlbWVudHMoZGF0YVRvRGlzcGxheSl7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhVG9EaXNwbGF5KVxyXG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxyXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpXHJcbiAgICBjb25zdCB3ZWF0aGVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VhdGhlci1uYW1lJylcclxuICAgIGNvbnN0IGNpdHlFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaXR5LW5hbWUnKVxyXG4gICAgY29uc3QgdGVtcGVyYXR1cmVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wZXJhdHVyZS1udW1iZXInKVxyXG4gICAgY29uc3QgdGVtcEljb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wZXJhdHVyZS1pY29uJylcclxuICAgIGNvbnN0IGZlZWxzTGlrZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWxzLWxpa2UnKVxyXG4gICAgY29uc3QgaHVtaWRpdHlFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5odW1pZGl0eScpXHJcbiAgICAvL1RPRE8gY29uc3QgY2hhbmNlUmFpbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYW5jZS1yYWluJylcclxuICAgIGNvbnN0IHdpbmRTcGVlZEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbmQtc3BlZWQnKVxyXG4gXHJcblxyXG4gICAgd2VhdGhlckVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS53ZWF0aGVyXHJcbiAgICBjaXR5RWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LmNpdHlOYW1lXHJcbiAgICB0ZW1wZXJhdHVyZUVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS50ZW1wZXJhdHVyZVxyXG4gICAgdGVtcEljb25FbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkuc2NhbGUgPT09ICdtZXRyaWMnID8gJ8K6QycgOiAnwrpGJ1xyXG4gICAgZmVlbHNMaWtlRWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LmZlZWxzTGlrZVxyXG4gICAgaHVtaWRpdHlFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkuaHVtaWRpdHlcclxuICAgIC8vVE9ETyBjaGFuY2VSYWluRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhbmNlLXJhaW4nKVxyXG4gICAgd2luZFNwZWVkRWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LndpbmRTcGVlZFxyXG59IiwiaW1wb3J0IHsgcmVuZGVyU3RhdGljRWxlbWVudHMgfSBmcm9tICcuLi92aWV3L3JlbmRlclN0YXRpY0VsZW1lbnRzJ1xyXG5pbXBvcnQgeyBmZXRjaFdlYXRoZXJBUEkgfSBmcm9tICcuL2ZldGNoV2VhdGhlckFQSSdcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzRGF0YShjaXR5LHNjYWxlID0gJ21ldHJpYycpe1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaFdlYXRoZXJBUEkoY2l0eSwgc2NhbGUpXHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgICAgICBjb25zdCBjaXR5TmFtZSA9IGRhdGEubmFtZVxyXG4gICAgICAgIGNvbnN0IHRlbXBlcmF0dXJlID0gZGF0YS5tYWluLnRlbXBcclxuICAgICAgICBjb25zdCBmZWVsc0xpa2VUZW1wID0gZGF0YS5tYWluLmZlZWxzX2xpa2VcclxuICAgICAgICBjb25zdCB3ZWF0aGVyID0gZGF0YS53ZWF0aGVyWzBdLm1haW5cclxuICAgICAgICBjb25zdCB3ZWF0aGVyRGVzY3JpcHRpb24gPSBkYXRhLndlYXRoZXJbMF0uZGVzY3JpcHRpb25cclxuICAgICAgICBjb25zdCBmZWVsc0xpa2UgPSBkYXRhLm1haW4uZmVlbHNfbGlrZVxyXG4gICAgICAgIGNvbnN0IGh1bWlkaXR5ID0gZGF0YS5tYWluLmh1bWlkaXR5XHJcbiAgICAgICAgY29uc3Qgd2luZFNwZWVkID0gZGF0YS53aW5kLnNwZWVkXHJcbiAgICAgICAgcmV0dXJue2NpdHlOYW1lLCB0ZW1wZXJhdHVyZSwgd2VhdGhlciwgd2VhdGhlckRlc2NyaXB0aW9uLGZlZWxzTGlrZSxodW1pZGl0eSx3aW5kU3BlZWQsIHNjYWxlfVxyXG5cclxuICAgIH0gY2F0Y2goZXJyKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnTm90IGZvdW5kJylcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufVxyXG5cclxuY29uc3Qgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC13ZWF0aGVyJylcclxuY29uc3Qgc2VhcmNoSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXHJcbmNvbnN0IGNoYW5nZVNjYWxlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYW5nZS1zY2FsZScpXHJcblxyXG5zZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PntcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBkYXRhVG9EaXNwbGF5ID0gIGF3YWl0IHByb2Nlc3NEYXRhKHNlYXJjaElucHV0LnZhbHVlKVxyXG4gICAgICAgIHJlbmRlclN0YXRpY0VsZW1lbnRzKGRhdGFUb0Rpc3BsYXkpXHJcbiAgICB9Y2F0Y2goZXJyKXtcclxuICAgIH1cclxufSlcclxuXHJcbmNoYW5nZVNjYWxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT57XHJcbiAgICBjb25zdCB0ZW1wSWNvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLWljb24nKVxyXG4gICAgY29uc3QgY2l0eU5hbWVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaXR5LW5hbWUnKVxyXG4gICAgaWYodGVtcEljb25FbCAmJiBjaXR5TmFtZUVsKXtcclxuICAgICAgICBjb25zdCBzY2FsZSA9IHRlbXBJY29uRWwudGV4dENvbnRlbnQgPT09ICfCukMnID8gJ2ltcGVyaWFsJyA6ICdtZXRyaWMnXHJcbiAgICAgICAgY29uc3QgZGF0YVRvRGlzcGxheSA9IGF3YWl0IHByb2Nlc3NEYXRhKGNpdHlOYW1lRWwudGV4dENvbnRlbnQsIHNjYWxlKVxyXG4gICAgICAgIHJlbmRlclN0YXRpY0VsZW1lbnRzKGRhdGFUb0Rpc3BsYXkpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufSlcclxuXHJcbiIsImV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFdlYXRoZXJBUEkgKGNpdHksc2NhbGUpe1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0ke2NpdHl9JnVuaXRzPSR7c2NhbGV9JmFwcGlkPTc2ZDUxMzZjZDU1ZDE0Yzg4ZTRkOTU0OWQwZjU1MGYyYClcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgfWNhdGNoKGVycil7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0NpdHkgbm90IGZvdW5kIScpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsicmVuZGVyU3RhdGljRWxlbWVudHMiLCJkYXRhVG9EaXNwbGF5IiwiY29uc29sZSIsImxvZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndlYXRoZXJFbCIsImNpdHlFbCIsInRlbXBlcmF0dXJlRWwiLCJ0ZW1wSWNvbkVsIiwiZmVlbHNMaWtlRWwiLCJodW1pZGl0eUVsIiwid2luZFNwZWVkRWwiLCJ0ZXh0Q29udGVudCIsIndlYXRoZXIiLCJjaXR5TmFtZSIsInRlbXBlcmF0dXJlIiwic2NhbGUiLCJmZWVsc0xpa2UiLCJodW1pZGl0eSIsIndpbmRTcGVlZCIsImFzeW5jIiwicHJvY2Vzc0RhdGEiLCJjaXR5IiwiZGF0YSIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwiZXJyIiwiZmV0Y2hXZWF0aGVyQVBJIiwibmFtZSIsIm1haW4iLCJ0ZW1wIiwiZmVlbHNfbGlrZSIsIndlYXRoZXJEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwid2luZCIsInNwZWVkIiwic2VhcmNoQnV0dG9uIiwic2VhcmNoSW5wdXQiLCJjaGFuZ2VTY2FsZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsImNpdHlOYW1lRWwiXSwic291cmNlUm9vdCI6IiJ9