(()=>{"use strict";const e=async(e,t)=>{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),a=await n.json(),o=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${a.coord.lat}&lon=${a.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`);return[a,await o.json()]};async function t(t,n="metric"){try{const a=await async function(t,n){const a=document.querySelector(".loader");try{return a.textContent="Loading ...",a.classList.toggle("visible"),await Promise.race([e(t,n),(o=5e3,new Promise(((e,t)=>{setTimeout((()=>{t("Timeout")}),o)})))]).then((function(e){return a.classList.toggle("visible"),e}))}catch(e){return a.textContent="City not found!",void setTimeout((()=>{a.classList.toggle("visible"),a.textContent="Loading ..."}),2e3)}var o}(t,n);if(!a)return;const o=a[0].name,c=a[0].sys.country;let r=new Date((new Date).toLocaleString("en-US",{timeZone:a[1].timezone}));const i=Math.floor(a[0].main.temp),d=a[0].weather[0].main,s=a[0].weather[0].icon,l=a[0].weather[0].description,u=Math.floor(a[0].main.feels_like),m=a[0].main.humidity,y=Math.floor(a[0].wind.speed);let p=[];for(let e=1;e<8;e++){const t=a[1].daily[e],n={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};p.push(n)}return{cityName:o,countryName:c,time:r,temperature:i,weather:d,icon:s,weatherDesc:l,feelsLike:u,humidity:m,windSpeed:y,scale:n,dailyForecast:p}}catch(e){return}}function n(e){const t=document.querySelector(".weather-info"),n=document.querySelector(".weather-icon"),o=document.querySelector(".city-name"),c=document.querySelector(".date"),r=document.querySelector(".temperature-value"),i=document.querySelector(".temperature-icon"),d=document.querySelector(".feels-like-icon"),s=document.querySelector(".feels-like-value"),l=document.querySelector(".humidity-icon"),u=document.querySelector(".humidity-value"),m=document.querySelector(".wind-speed-icon"),y=document.querySelector(".wind-speed-value"),p=document.querySelector(".change-scale-desc");t.textContent=e.weather,n.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,o.textContent=e.cityName+", "+e.countryName,r.textContent=e.temperature,i.textContent="metric"===e.scale?"ºC":"ºF";const h=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];c.textContent=h[e.time.getDay()]+", "+e.time.getDate()+" - "+("0"+e.time.getHours()).slice(-2)+":"+("0"+e.time.getMinutes()).slice(-2),d.classList.add("fa-solid"),d.classList.add("fa-temperature-high"),s.textContent=e.feelsLike+" "+i.textContent,l.classList.add("fa-solid"),l.classList.add("fa-droplet"),u.textContent=e.humidity+" %",m.classList.add("fa-solid"),m.classList.add("fa-wind"),y.textContent=e.windSpeed+" "+("metric"===e.scale?"meter/sec":"miles/hour"),p.textContent="Change to "+("metric"===e.scale?"imperial":"metric");for(let t=0;t<e.dailyForecast.length;t++){const n=document.querySelector(`.day${t+1}`),o=document.querySelector(`.day${t+1} > .weekday`),c=document.querySelector(`.day${t+1} > .max-temp`),r=document.querySelector(`.day${t+1} > .min-temp`),d=document.querySelector(`.day${t+1} > .weather-day`),s=document.querySelector(`.day${t+1} > .icon`);o.innerHTML=a(e.time.getDay(),t,h),c.textContent=Math.floor(e.dailyForecast[t].temperatureMax)+" "+i.textContent,r.textContent=Math.floor(e.dailyForecast[t].temperatureMin)+" "+i.textContent,d.textContent=e.dailyForecast[t].weather,s.innerHTML=`<img src="../icons/${e.dailyForecast[t].icon}.png"></img>`,n.appendChild(o),n.appendChild(c),n.appendChild(r),n.appendChild(d),n.appendChild(s)}}const a=(e,t,n)=>{let a=e+t;return a>6&&(a-=7),n[a]},o=document.querySelector(".fa-magnifying-glass"),c=document.querySelector("input#search"),r=document.querySelector(".change-scale"),i=document.querySelector(".temperature-icon"),d=document.querySelector(".city-name");!async function(){o.addEventListener("click",(async()=>{try{n(await t(c.value))}catch(e){}})),r.addEventListener("click",(async()=>{if(i&&d){const e="ºC"===i.textContent?"imperial":"metric";n(await t(d.textContent,e))}}))}(),async function(){n(await t("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,