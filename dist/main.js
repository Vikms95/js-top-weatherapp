(()=>{"use strict";function e(e){console.log(e),document.querySelector("body"),document.querySelector(".container");const t=document.querySelector(".weather-name"),n=document.querySelector(".city-name"),c=document.querySelector(".temperature-number"),o=document.querySelector(".temperature-icon");t.textContent=e.weather,n.textContent=e.cityName,c.textContent=e.temperature,o.textContent="metric"===e.scale?"ºC":"ºF"}async function t(e,t="metric"){try{const n=await async function(e,t){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),c=await n.json();return console.log(c),c}catch(e){return void console.log("City not found!")}}(e,t);console.log(n);const c=n.name,o=n.main.temp;return{cityName:c,temperature:o,feelsLikeTemp:n.main.feels_like,weather:n.weather[0].main,scale:t}}catch(e){return void console.log("Not found")}}const n=document.querySelector(".search-weather"),c=document.querySelector("input"),o=document.querySelector(".change-scale");n.addEventListener("click",(async()=>{try{e(await t(c.value))}catch(e){}})),o.addEventListener("click",(async()=>{const n=document.querySelector(".temperature-icon"),c=document.querySelector(".city-name");if(n&&c){const o="ºC"===n.textContent?"imperial":"metric";e(await t(c.textContent,o))}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQ08sU0FBU0EsRUFBcUJDLEdBQ2pDQyxRQUFRQyxJQUFJRixHQUNDRyxTQUFTQyxjQUFjLFFBQ2xCRCxTQUFTQyxjQUFjLGNBRHpDLE1BRU1DLEVBQVlGLFNBQVNDLGNBQWMsaUJBQ25DRSxFQUFTSCxTQUFTQyxjQUFjLGNBQ2hDRyxFQUFnQkosU0FBU0MsY0FBYyx1QkFDdkNJLEVBQWFMLFNBQVNDLGNBQWMscUJBRTFDQyxFQUFVSSxZQUFjVCxFQUFjVSxRQUN0Q0osRUFBT0csWUFBY1QsRUFBY1csU0FDbkNKLEVBQWNFLFlBQWNULEVBQWNZLFlBQzFDSixFQUFXQyxZQUFzQyxXQUF4QlQsRUFBY2EsTUFBcUIsS0FBTyxLQ1ZoRUMsZUFBZUMsRUFBWUMsRUFBS0gsRUFBUSxVQUMzQyxJQUNJLE1BQU1JLFFDTFBILGVBQWdDRSxFQUFLSCxHQUN4QyxJQUNJLE1BQU1LLFFBQWlCQyxNQUFNLG9EQUFvREgsV0FBY0gsNENBQ3pGSSxRQUFhQyxFQUFTRSxPQUU1QixPQURBbkIsUUFBUUMsSUFBSWUsR0FDTEEsRUFDVixNQUFNSSxHQUVILFlBREFwQixRQUFRQyxJQUFJLG9CREZPb0IsQ0FBZ0JOLEVBQU1ILEdBQ3pDWixRQUFRQyxJQUFJZSxHQUNaLE1BQU1OLEVBQVdNLEVBQUtNLEtBQ2hCWCxFQUFjSyxFQUFLTyxLQUFLQyxLQUc5QixNQUFNLENBQUNkLFNBQUFBLEVBQVVDLFlBQUFBLEVBQWFjLGNBRlJULEVBQUtPLEtBQUtHLFdBRWFqQixRQUQ3Qk8sRUFBS1AsUUFBUSxHQUFHYyxLQUNzQlgsTUFBQUEsR0FFeEQsTUFBTVEsR0FFSixZQURBcEIsUUFBUUMsSUFBSSxjQUtwQixNQUFNMEIsRUFBZXpCLFNBQVNDLGNBQWMsbUJBQ3RDeUIsRUFBYzFCLFNBQVNDLGNBQWMsU0FDckMwQixFQUFvQjNCLFNBQVNDLGNBQWMsaUJBRWpEd0IsRUFBYUcsaUJBQWlCLFNBQVNqQixVQUNuQyxJQUVJZixRQUQ2QmdCLEVBQVljLEVBQVlHLFFBRXhELE1BQU1YLFFBSVhTLEVBQWtCQyxpQkFBaUIsU0FBU2pCLFVBQ3hDLE1BQU1OLEVBQWFMLFNBQVNDLGNBQWMscUJBQ3BDNkIsRUFBYTlCLFNBQVNDLGNBQWMsY0FDMUMsR0FBR0ksR0FBY3lCLEVBQVcsQ0FDeEIsTUFBTXBCLEVBQW1DLE9BQTNCTCxFQUFXQyxZQUF1QixXQUFhLFNBRTdEVixRQUQ0QmdCLEVBQVlrQixFQUFXeEIsWUFBYUksUyIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL3ZpZXcvcmVuZGVyU3RhdGljRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vanMtdG9wLXdlYXRoZXJhcHAvLi9zcmMvbG9naWMvcHJvY2Vzc0RhdGEuanMiLCJ3ZWJwYWNrOi8vanMtdG9wLXdlYXRoZXJhcHAvLi9zcmMvbG9naWMvZmV0Y2hXZWF0aGVyQVBJLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRha2VzIHByb2Nlc3NEYXRhIGFzIGFyZ3VtZW50XHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdGF0aWNFbGVtZW50cyhkYXRhVG9EaXNwbGF5KXtcclxuICAgIGNvbnNvbGUubG9nKGRhdGFUb0Rpc3BsYXkpXHJcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJylcclxuICAgIGNvbnN0IHdlYXRoZXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyLW5hbWUnKVxyXG4gICAgY29uc3QgY2l0eUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNpdHktbmFtZScpXHJcbiAgICBjb25zdCB0ZW1wZXJhdHVyZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLW51bWJlcicpXHJcbiAgICBjb25zdCB0ZW1wSWNvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLWljb24nKVxyXG5cclxuICAgIHdlYXRoZXJFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkud2VhdGhlclxyXG4gICAgY2l0eUVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS5jaXR5TmFtZVxyXG4gICAgdGVtcGVyYXR1cmVFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkudGVtcGVyYXR1cmVcclxuICAgIHRlbXBJY29uRWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LnNjYWxlID09PSAnbWV0cmljJyA/ICfCukMnIDogJ8K6RidcclxufSIsImltcG9ydCB7IHJlbmRlclN0YXRpY0VsZW1lbnRzIH0gZnJvbSAnLi4vdmlldy9yZW5kZXJTdGF0aWNFbGVtZW50cydcclxuaW1wb3J0IHsgZmV0Y2hXZWF0aGVyQVBJIH0gZnJvbSAnLi9mZXRjaFdlYXRoZXJBUEknXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0RhdGEoY2l0eSxzY2FsZSA9ICdtZXRyaWMnKXtcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hXZWF0aGVyQVBJKGNpdHksIHNjYWxlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcbiAgICAgICAgY29uc3QgY2l0eU5hbWUgPSBkYXRhLm5hbWVcclxuICAgICAgICBjb25zdCB0ZW1wZXJhdHVyZSA9IGRhdGEubWFpbi50ZW1wXHJcbiAgICAgICAgY29uc3QgZmVlbHNMaWtlVGVtcCA9IGRhdGEubWFpbi5mZWVsc19saWtlXHJcbiAgICAgICAgY29uc3Qgd2VhdGhlciA9IGRhdGEud2VhdGhlclswXS5tYWluXHJcbiAgICAgICAgcmV0dXJue2NpdHlOYW1lLCB0ZW1wZXJhdHVyZSwgZmVlbHNMaWtlVGVtcCwgd2VhdGhlciwgc2NhbGV9XHJcblxyXG4gICAgfSBjYXRjaChlcnIpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdOb3QgZm91bmQnKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBzZWFyY2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLXdlYXRoZXInKVxyXG5jb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JylcclxuY29uc3QgY2hhbmdlU2NhbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhbmdlLXNjYWxlJylcclxuXHJcbnNlYXJjaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+e1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IGRhdGFUb0Rpc3BsYXkgPSAgYXdhaXQgcHJvY2Vzc0RhdGEoc2VhcmNoSW5wdXQudmFsdWUpXHJcbiAgICAgICAgcmVuZGVyU3RhdGljRWxlbWVudHMoZGF0YVRvRGlzcGxheSlcclxuICAgIH1jYXRjaChlcnIpe1xyXG4gICAgfVxyXG59KVxyXG5cclxuY2hhbmdlU2NhbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PntcclxuICAgIGNvbnN0IHRlbXBJY29uRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVtcGVyYXR1cmUtaWNvbicpXHJcbiAgICBjb25zdCBjaXR5TmFtZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNpdHktbmFtZScpXHJcbiAgICBpZih0ZW1wSWNvbkVsICYmIGNpdHlOYW1lRWwpe1xyXG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGVtcEljb25FbC50ZXh0Q29udGVudCA9PT0gJ8K6QycgPyAnaW1wZXJpYWwnIDogJ21ldHJpYydcclxuICAgICAgICBjb25zdCBkYXRhVG9EaXNwbGF5ID0gYXdhaXQgcHJvY2Vzc0RhdGEoY2l0eU5hbWVFbC50ZXh0Q29udGVudCwgc2NhbGUpXHJcbiAgICAgICAgcmVuZGVyU3RhdGljRWxlbWVudHMoZGF0YVRvRGlzcGxheSlcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG59KVxyXG5cclxuIiwiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoV2VhdGhlckFQSSAoY2l0eSxzY2FsZSl7XHJcbiAgICB0cnl7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7Y2l0eX0mdW5pdHM9JHtzY2FsZX0mYXBwaWQ9NzZkNTEzNmNkNTVkMTRjODhlNGQ5NTQ5ZDBmNTUwZjJgKVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxyXG4gICAgICAgIHJldHVybiBkYXRhXHJcbiAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnQ2l0eSBub3QgZm91bmQhJylcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJyZW5kZXJTdGF0aWNFbGVtZW50cyIsImRhdGFUb0Rpc3BsYXkiLCJjb25zb2xlIiwibG9nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2VhdGhlckVsIiwiY2l0eUVsIiwidGVtcGVyYXR1cmVFbCIsInRlbXBJY29uRWwiLCJ0ZXh0Q29udGVudCIsIndlYXRoZXIiLCJjaXR5TmFtZSIsInRlbXBlcmF0dXJlIiwic2NhbGUiLCJhc3luYyIsInByb2Nlc3NEYXRhIiwiY2l0eSIsImRhdGEiLCJyZXNwb25zZSIsImZldGNoIiwianNvbiIsImVyciIsImZldGNoV2VhdGhlckFQSSIsIm5hbWUiLCJtYWluIiwidGVtcCIsImZlZWxzTGlrZVRlbXAiLCJmZWVsc19saWtlIiwic2VhcmNoQnV0dG9uIiwic2VhcmNoSW5wdXQiLCJjaGFuZ2VTY2FsZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsImNpdHlOYW1lRWwiXSwic291cmNlUm9vdCI6IiJ9