(()=>{"use strict";async function e(e,t="metric"){try{const{data:n,data2:a}=await async function(e,t){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),a=await n.json(),o=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${a.coord.lat}&lon=${a.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`),c=await o.json();return console.log(a,c),{data:a,data2:c}}catch(e){return void console.log("City not found!")}}(e,t);console.log(a);const o=n.name,c=Math.floor(n.main.temp),r=n.weather[0].main,i=n.weather[0].icon,d=n.weather[0].description,l=Math.floor(n.main.feels_like),u=n.main.humidity,s=Math.floor(n.wind.speed);let m=[];for(let e=1;e<8;e++){const t=a.daily[e],n={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};m.push(n)}return console.log(m),{cityName:o,temperature:c,weather:r,icon:i,weatherDesc:d,feelsLike:l,humidity:u,windSpeed:s,scale:t,dailyForecast:m}}catch(e){return void console.log("Not found")}}function t(e){console.log(e);const t=document.querySelector(".weather-info"),n=document.querySelector(".weather-icon"),a=document.querySelector(".city-name"),o=document.querySelector(".temperature-value"),c=document.querySelector(".temperature-icon"),r=document.querySelector(".feels-like-icon"),i=document.querySelector(".feels-like-value"),d=document.querySelector(".humidity-icon"),l=document.querySelector(".humidity-value"),u=document.querySelector(".wind-speed-icon"),s=document.querySelector(".wind-speed-value");t.textContent=e.weather,n.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,a.textContent=e.cityName,o.textContent=e.temperature,c.textContent="metric"===e.scale?"ºC":"ºF",r.classList.add("fa-solid"),r.classList.add("fa-temperature-high"),i.textContent=e.feelsLike+" "+c.textContent,d.classList.add("fa-solid"),d.classList.add("fa-droplet"),l.textContent=e.humidity+" %",u.classList.add("fa-solid"),u.classList.add("fa-wind"),s.textContent=e.windSpeed+" km/h";for(let t=0;t<e.dailyForecast.length;t++){const n=document.querySelector(`.day${t+1}`),a=document.querySelector(`.day${t+1} > .max-temp`),o=document.querySelector(`.day${t+1} > .min-temp`),r=document.querySelector(`.day${t+1} > .weather-day`),i=document.querySelector(`.day${t+1} > .icon`);a.textContent=Math.floor(e.dailyForecast[t].temperatureMax)+" "+c.textContent,o.textContent=Math.floor(e.dailyForecast[t].temperatureMin)+" "+c.textContent,r.textContent=e.dailyForecast[t].weather,i.innerHTML=`<img src="../icons/${e.dailyForecast[t].icon}.png"></img>`,n.appendChild(a),n.appendChild(o),n.appendChild(r),n.appendChild(i)}}const n=document.querySelector(".fa-magnifying-glass"),a=document.querySelector("input"),o=document.querySelector(".change-scale"),c=document.querySelector(".temperature-icon"),r=document.querySelector(".city-name");!async function(){n.addEventListener("click",(async()=>{try{t(await e(a.value))}catch(e){}})),o.addEventListener("click",(async()=>{if(c&&r){const n="ºC"===c.textContent?"imperial":"metric";t(await e(r.textContent,n))}}))}(),async function(){t(await e("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,