(()=>{"use strict";const e=async(e,t)=>{const a=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),n=await a.json(),o=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${n.coord.lat}&lon=${n.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`);return{dataSet1:n,dataSet2:await o.json()}};async function t(t,a="metric"){try{const n=await async function(t,a){const n=document.querySelector(".loader");try{return n.textContent="Loading ...",n.classList.toggle("visible"),await Promise.race([e(t,a),(o=5e3,new Promise((e=>{setTimeout((()=>{e("Timeout")}),o)})))]).then((e=>(n.classList.toggle("visible"),e)))}catch(e){return n.textContent="City not found!",void setTimeout((()=>{n.classList.toggle("visible"),n.textContent="Loading ..."}),2e3)}var o}(t,a);if(!n)return;const o=n.dataSet1.name,c=n.dataSet1.sys.country;let r=new Date((new Date).toLocaleString("en-US",{timeZone:n.timezone}));const i=Math.floor(n.dataSet1.main.temp),d=n.dataSet1.weather[0].main,l=n.dataSet1.weather[0].icon,u=n.dataSet1.weather[0].description,s=Math.floor(n.dataSet1.main.feels_like),m=n.dataSet1.main.humidity,y=Math.floor(n.dataSet1.wind.speed);let h=[];for(let e=1;e<8;e++){const t=n.dataSet2.daily[e],a={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};h.push(a)}return{cityName:o,countryName:c,time:r,temperature:i,weather:d,weatherDesc:u,icon:l,feelsLike:s,humidity:m,windSpeed:y,scale:a,dailyForecast:h}}catch(e){return}}function a(e){const t=document.querySelector("body"),a=document.querySelector(".weather-info"),o=document.querySelector(".weather-icon"),c=document.querySelector(".city-name"),r=document.querySelector(".date"),i=document.querySelector(".temperature-value"),d=document.querySelector(".temperature-icon"),l=document.querySelector(".feels-like-icon"),u=document.querySelector(".feels-like-value"),s=document.querySelector(".humidity-icon"),m=document.querySelector(".humidity-value"),y=document.querySelector(".wind-speed-icon"),h=document.querySelector(".wind-speed-value"),p=document.querySelector(".change-scale-desc"),S=document.querySelector("input#search"),f=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];a.textContent=e.weather,o.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,c.textContent=e.cityName+", "+e.countryName,i.textContent=e.temperature,d.textContent="metric"===e.scale?"ºC":"ºF",r.textContent=f[e.time.getDay()]+", "+e.time.getDate()+" - "+("0"+e.time.getHours()).slice(-2)+":"+("0"+e.time.getMinutes()).slice(-2),l.classList.add("fa-solid"),l.classList.add("fa-temperature-high"),u.textContent=e.feelsLike+" "+d.textContent,s.classList.add("fa-solid"),s.classList.add("fa-droplet"),m.textContent=e.humidity+" %",y.classList.add("fa-solid"),y.classList.add("fa-wind"),S.value="",t.style.backgroundColor="blue",h.textContent=e.windSpeed+" "+("metric"===e.scale?"meter/sec":"miles/hour"),p.textContent="Change to "+("metric"===e.scale?"imperial":"metric");for(let t=0;t<e.dailyForecast.length;t++){const a=document.querySelector(`.day${t+1}`),o=document.querySelector(`.day${t+1} > .weekday`),c=document.querySelector(`.day${t+1} > .max-temp`),r=document.querySelector(`.day${t+1} > .min-temp`),i=document.querySelector(`.day${t+1} > .weather-day`),l=document.querySelector(`.day${t+1} > .icon`);o.innerHTML=n(e.time.getDay(),t,f),c.textContent=Math.floor(e.dailyForecast[t].temperatureMax)+" "+d.textContent,r.textContent=Math.floor(e.dailyForecast[t].temperatureMin)+" "+d.textContent,i.textContent=e.dailyForecast[t].weather,l.innerHTML=`<img src="../icons/${e.dailyForecast[t].icon}.png"></img>`,a.appendChild(o),a.appendChild(c),a.appendChild(r),a.appendChild(i),a.appendChild(l)}}const n=(e,t,a)=>{let n=e+t;return n>6&&(n-=7),a[n]},o=document.querySelector(".fa-magnifying-glass"),c=document.querySelector("input#search"),r=document.querySelector(".change-scale"),i=document.querySelector(".temperature-icon"),d=document.querySelector(".city-name");!async function(){o.addEventListener("click",(async()=>{try{a(await t(c.value))}catch(e){}})),r.addEventListener("click",(async()=>{if(i&&d)try{const e="ºC"===i.textContent?"imperial":"metric";a(await t(d.textContent,e))}catch(e){}}))}(),async function(){a(await t("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,