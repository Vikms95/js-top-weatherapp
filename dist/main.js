(()=>{"use strict";async function e(e,t="metric"){try{const{data:n,data2:a}=await async function(e,t){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),a=await n.json(),c=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${a.coord.lat}&lon=${a.coord.lon}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`);return{data:a,data2:await c.json()}}catch(e){return void console.log("City not found!")}}(e,t);console.log(a);const c=n.name,o=Math.ceil(n.main.temp),i=n.weather[0].main,r=n.weather[0].icon,d=n.weather[0].description,l=Math.ceil(n.main.feels_like),u=n.main.humidity,s=Math.ceil(n.wind.speed);let m=[];for(let e=1;e<8;e++){const t=a.daily[e],n={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};m.push(n)}return console.log(m),{cityName:c,temperature:o,weather:i,icon:r,weatherDesc:d,feelsLike:l,humidity:u,windSpeed:s,scale:t,dailyForecast:m}}catch(e){return void console.log("Not found")}}function t(e){console.log(e);const t=document.querySelector(".weather-info"),n=document.querySelector(".weather-icon"),a=document.querySelector(".city-name"),c=document.querySelector(".temperature-value"),o=document.querySelector(".temperature-icon"),i=document.querySelector(".feels-like-icon"),r=document.querySelector(".feels-like-value"),d=document.querySelector(".humidity-icon"),l=document.querySelector(".humidity-value"),u=document.querySelector(".wind-speed-icon"),s=document.querySelector(".wind-speed-value");t.textContent=e.weather,n.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,a.textContent=e.cityName,c.textContent=e.temperature,o.textContent="metric"===e.scale?"ºC":"ºF",i.classList.add("fa-solid"),i.classList.add("fa-temperature-high"),r.textContent=e.feelsLike+" "+o.textContent,d.classList.add("fa-solid"),d.classList.add("fa-droplet"),l.textContent=e.humidity+" %",u.classList.add("fa-solid"),u.classList.add("fa-wind"),s.textContent=e.windSpeed+" km/h";for(let t=0;t<e.dailyForecast.length;t++){const n=document.querySelector(`.day${t+1}`),a=document.querySelector(`.day${t+1} > .max-temp`),c=document.querySelector(`.day${t+1} > .min-temp`),i=document.querySelector(`.day${t+1} > .weather`),r=document.querySelector(`.day${t+1} > .icon`);a.textContent=Math.ceil(e.dailyForecast[t].temperatureMax)+" "+o.textContent,c.textContent=Math.ceil(e.dailyForecast[t].temperatureMin)+" "+o.textContent,i.textContent=e.dailyForecast[t].weather,r.innerHTML=`<img src="../icons/${e.dailyForecast[t].icon}.png"></img>`,n.appendChild(a),n.appendChild(c),n.appendChild(i),n.appendChild(r)}}const n=document.querySelector(".fa-magnifying-glass"),a=(document.querySelector("input"),document.querySelector(".change-scale")),c=document.querySelector(".temperature-icon"),o=document.querySelector(".city-name");!async function(){n.addEventListener("click",(async()=>{try{t(await e("Barcelona"))}catch(e){}})),a.addEventListener("click",(async()=>{if(c&&o){const n="ºC"===c.textContent?"imperial":"metric";t(await e(o.textContent,n))}}))}(),async function(){t(await e("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,