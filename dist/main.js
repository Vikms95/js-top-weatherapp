(()=>{"use strict";function e(e){console.log(e);const t=document.querySelector(".weather-info"),a=document.querySelector(".weather-icon"),n=document.querySelector(".city-name"),c=document.querySelector(".temperature-value"),o=document.querySelector(".temperature-icon"),i=document.querySelector(".feels-like-icon"),r=document.querySelector(".feels-like-value"),d=document.querySelector(".humidity-icon"),l=document.querySelector(".humidity-value"),u=document.querySelector(".wind-speed-icon"),s=document.querySelector(".wind-speed-value");t.textContent=e.weather,a.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,n.textContent=e.cityName,c.textContent=e.temperature,o.textContent="metric"===e.scale?"ºC":"ºF",i.classList.add("fa-solid"),i.classList.add("fa-temperature-high"),r.textContent=e.feelsLike+" "+o.textContent,d.classList.add("fa-solid"),d.classList.add("fa-droplet"),l.textContent=e.humidity+" %",u.classList.add("fa-solid"),u.classList.add("fa-wind"),s.textContent=e.windSpeed+" km/h"}async function t(e,t="metric"){try{const{data:a,data2:n}=await async function(e,t){try{const a=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),n=await a.json(),c=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${n.coord.lat}&lon=${n.coord.lon}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`);return{data:n,data2:await c.json()}}catch(e){return void console.log("City not found!")}}(e,t),c=a.name,o=Math.ceil(a.main.temp),i=a.weather[0].main,r=a.weather[0].icon,d=a.weather[0].description,l=Math.ceil(a.main.feels_like),u=a.main.humidity,s=Math.ceil(a.wind.speed);let m=[];for(let e=1;e<8;e++){const t=n.daily[e],a={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};m.push(a)}return{cityName:c,temperature:o,weather:i,icon:r,weatherDesc:d,feelsLike:l,humidity:u,windSpeed:s,scale:t,dailyForecast:m}}catch(e){return void console.log("Not found")}}const a=document.querySelector(".fa-magnifying-glass"),n=(document.querySelector("input"),document.querySelector(".change-scale"));a.addEventListener("click",(async()=>{try{e(await t("Barcelona"))}catch(e){}})),n.addEventListener("click",(async()=>{const a=document.querySelector(".temperature-icon"),n=document.querySelector(".city-name");if(a&&n){const c="ºC"===a.textContent?"imperial":"metric";e(await t(n.textContent,c))}})),async function(){e(await t("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,