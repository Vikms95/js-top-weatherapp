(()=>{"use strict";const e=async(e,t)=>{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),a=await n.json(),o=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${a.coord.lat}&lon=${a.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`);return[a,await o.json()]};async function t(t,n="metric"){try{const a=await async function(t,n){const a=document.querySelector(".loader");try{return a.textContent="Loading ...",a.classList.toggle("visible"),await Promise.race([e(t,n),(o=5e3,new Promise(((e,t)=>{setTimeout((()=>{t("Timeout")}),o)})))]).then((function(e){return a.classList.toggle("visible"),e}))}catch(e){return a.textContent="City not found!",void setTimeout((()=>{a.classList.toggle("visible"),a.textContent="Loading ..."}),2e3)}var o}(t,n);if(!a)return;const o=a[0].name,r=a[0].sys.country;let c=new Date((new Date).toLocaleString("en-US",{timeZone:a[1].timezone}));const i=Math.floor(a[0].main.temp),d=a[0].weather[0].main,s=a[0].weather[0].icon,u=a[0].weather[0].description,l=Math.floor(a[0].main.feels_like),m=a[0].main.humidity,y=Math.floor(a[0].wind.speed);let p=[];for(let e=1;e<8;e++){const t=a[1].daily[e],n={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};p.push(n)}return{cityName:o,countryName:r,time:c,temperature:i,weather:d,icon:s,weatherDesc:u,feelsLike:l,humidity:m,windSpeed:y,scale:n,dailyForecast:p}}catch(e){return}}function n(e){const t=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],n=document.querySelector(".weather-info"),o=document.querySelector(".weather-icon"),r=document.querySelector(".city-name"),c=document.querySelector(".date"),i=document.querySelector(".temperature-value"),d=document.querySelector(".temperature-icon"),s=document.querySelector(".feels-like-icon"),u=document.querySelector(".feels-like-value"),l=document.querySelector(".humidity-icon"),m=document.querySelector(".humidity-value"),y=document.querySelector(".wind-speed-icon"),p=document.querySelector(".wind-speed-value"),h=document.querySelector(".change-scale-desc");n.textContent=e.weather,o.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,r.textContent=e.cityName+", "+e.countryName,c.textContent=t[e.time.getDay()]+", "+e.time.getDate()+" - "+e.time.getHours()+":"+e.time.getMinutes(),i.textContent=e.temperature,d.textContent="metric"===e.scale?"ºC":"ºF",s.classList.add("fa-solid"),s.classList.add("fa-temperature-high"),u.textContent=e.feelsLike+" "+d.textContent,l.classList.add("fa-solid"),l.classList.add("fa-droplet"),m.textContent=e.humidity+" %",y.classList.add("fa-solid"),y.classList.add("fa-wind"),p.textContent=e.windSpeed+" "+("metric"===e.scale?"meter/sec":"miles/hour"),h.textContent="Change to "+("metric"===e.scale?"imperial":"metric");for(let n=0;n<e.dailyForecast.length;n++){const o=document.querySelector(`.day${n+1}`),r=document.querySelector(`.day${n+1} > .weekday`),c=document.querySelector(`.day${n+1} > .max-temp`),i=document.querySelector(`.day${n+1} > .min-temp`),s=document.querySelector(`.day${n+1} > .weather-day`),u=document.querySelector(`.day${n+1} > .icon`);r.innerHTML=a(e.time.getDay(),n,t),c.textContent=Math.floor(e.dailyForecast[n].temperatureMax)+" "+d.textContent,i.textContent=Math.floor(e.dailyForecast[n].temperatureMin)+" "+d.textContent,s.textContent=e.dailyForecast[n].weather,u.innerHTML=`<img src="../icons/${e.dailyForecast[n].icon}.png"></img>`,o.appendChild(r),o.appendChild(c),o.appendChild(i),o.appendChild(s),o.appendChild(u)}}const a=(e,t,n)=>{let a=e+t;return a>6&&(a-=7),n[a]},o=document.querySelector(".fa-magnifying-glass"),r=document.querySelector("input#search"),c=document.querySelector(".change-scale"),i=document.querySelector(".temperature-icon"),d=document.querySelector(".city-name");!async function(){o.addEventListener("click",(async()=>{try{n(await t(r.value))}catch(e){}})),c.addEventListener("click",(async()=>{if(i&&d){const e="ºC"===i.textContent?"imperial":"metric";n(await t(d.textContent,e))}}))}(),async function(){n(await t("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,