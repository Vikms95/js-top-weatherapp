(()=>{"use strict";function e(e){console.log(e),document.querySelector("body"),document.querySelector(".container");const t=document.querySelector(".weather-name"),n=document.querySelector(".weather-icon"),c=document.querySelector(".city-name"),o=document.querySelector(".temperature-number"),r=document.querySelector(".temperature-icon"),i=document.querySelector(".feels-like"),a=document.querySelector(".humidity"),u=document.querySelector(".wind-speed");t.textContent=e.weather,n.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,c.textContent=e.cityName,o.textContent=e.temperature,r.textContent="metric"===e.scale?"ºC":"ºF",i.textContent=e.feelsLike,a.textContent=e.humidity,u.textContent=e.windSpeed}async function t(e,t="metric"){try{const n=await async function(e,t){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),c=await n.json();return console.log(c),c}catch(e){return void console.log("City not found!")}}(e,t);console.log(n);const c=n.name,o=n.main.temp,r=n.weather[0].main,i=n.weather[0].icon,a=n.weather[0].description,u=n.main.feels_like;return{cityName:c,temperature:o,weather:r,icon:i,weatherDesc:a,feelsLike:u,humidity:n.main.humidity,windSpeed:n.wind.speed,scale:t}}catch(e){return void console.log("Not found")}}const n=document.querySelector(".search-weather"),c=document.querySelector("input"),o=document.querySelector(".change-scale");n.addEventListener("click",(async()=>{try{e(await t(c.value))}catch(e){}})),o.addEventListener("click",(async()=>{const n=document.querySelector(".temperature-icon"),c=document.querySelector(".city-name");if(n&&c){const o="ºC"===n.textContent?"imperial":"metric";e(await t(c.textContent,o))}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQ08sU0FBU0EsRUFBcUJDLEdBQ2pDQyxRQUFRQyxJQUFJRixHQUNDRyxTQUFTQyxjQUFjLFFBQ2xCRCxTQUFTQyxjQUFjLGNBRHpDLE1BRU1DLEVBQVlGLFNBQVNDLGNBQWMsaUJBQ25DRSxFQUFnQkgsU0FBU0MsY0FBYyxpQkFDdkNHLEVBQVNKLFNBQVNDLGNBQWMsY0FDaENJLEVBQWdCTCxTQUFTQyxjQUFjLHVCQUN2Q0ssRUFBYU4sU0FBU0MsY0FBYyxxQkFDcENNLEVBQWNQLFNBQVNDLGNBQWMsZUFDckNPLEVBQWFSLFNBQVNDLGNBQWMsYUFDcENRLEVBQWNULFNBQVNDLGNBQWMsZUFHM0NDLEVBQVVRLFlBQWNiLEVBQWNjLFFBQ3RDUixFQUFjUyxVQUFZLHNCQUFzQmYsRUFBY2dCLG1CQUM5RFQsRUFBT00sWUFBY2IsRUFBY2lCLFNBQ25DVCxFQUFjSyxZQUFjYixFQUFja0IsWUFDMUNULEVBQVdJLFlBQXNDLFdBQXhCYixFQUFjbUIsTUFBcUIsS0FBTyxLQUNuRVQsRUFBWUcsWUFBY2IsRUFBY29CLFVBQ3hDVCxFQUFXRSxZQUFjYixFQUFjcUIsU0FDdkNULEVBQVlDLFlBQWNiLEVBQWNzQixVQ25CckNDLGVBQWVDLEVBQVlDLEVBQUtOLEVBQVEsVUFDM0MsSUFDSSxNQUFNTyxRQ0xQSCxlQUFnQ0UsRUFBS04sR0FDeEMsSUFDSSxNQUFNUSxRQUFpQkMsTUFBTSxvREFBb0RILFdBQWNOLDRDQUN6Rk8sUUFBYUMsRUFBU0UsT0FFNUIsT0FEQTVCLFFBQVFDLElBQUl3QixHQUNMQSxFQUNWLE1BQU1JLEdBRUgsWUFEQTdCLFFBQVFDLElBQUksb0JERk82QixDQUFnQk4sRUFBTU4sR0FDekNsQixRQUFRQyxJQUFJd0IsR0FDWixNQUFNVCxFQUFXUyxFQUFLTSxLQUNoQmQsRUFBY1EsRUFBS08sS0FBS0MsS0FDeEJwQixFQUFVWSxFQUFLWixRQUFRLEdBQUdtQixLQUMxQmpCLEVBQU9VLEVBQUtaLFFBQVEsR0FBR0UsS0FDdkJtQixFQUFjVCxFQUFLWixRQUFRLEdBQUdzQixZQUM5QmhCLEVBQVlNLEVBQUtPLEtBQUtJLFdBRzVCLE1BQU0sQ0FBRXBCLFNBQUFBLEVBQVVDLFlBQUFBLEVBQWFKLFFBQUFBLEVBQVNFLEtBQUFBLEVBQU1tQixZQUFBQSxFQUFhZixVQUFBQSxFQUFXQyxTQUZyREssRUFBS08sS0FBS1osU0FFcURDLFVBRDlESSxFQUFLWSxLQUFLQyxNQUMrRHBCLE1BQUFBLEdBRTdGLE1BQU1XLEdBRUosWUFEQTdCLFFBQVFDLElBQUksY0FLcEIsTUFBTXNDLEVBQWVyQyxTQUFTQyxjQUFjLG1CQUN0Q3FDLEVBQWN0QyxTQUFTQyxjQUFjLFNBQ3JDc0MsRUFBb0J2QyxTQUFTQyxjQUFjLGlCQUVqRG9DLEVBQWFHLGlCQUFpQixTQUFTcEIsVUFDbkMsSUFFSXhCLFFBRDZCeUIsRUFBWWlCLEVBQVlHLFFBRXhELE1BQU1kLFFBSVhZLEVBQWtCQyxpQkFBaUIsU0FBU3BCLFVBQ3hDLE1BQU1kLEVBQWFOLFNBQVNDLGNBQWMscUJBQ3BDeUMsRUFBYTFDLFNBQVNDLGNBQWMsY0FDMUMsR0FBR0ssR0FBY29DLEVBQVcsQ0FDeEIsTUFBTTFCLEVBQW1DLE9BQTNCVixFQUFXSSxZQUF1QixXQUFhLFNBRTdEZCxRQUQ0QnlCLEVBQVlxQixFQUFXaEMsWUFBYU0sUyIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL3ZpZXcvcmVuZGVyU3RhdGljRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vanMtdG9wLXdlYXRoZXJhcHAvLi9zcmMvbG9naWMvcHJvY2Vzc0RhdGEuanMiLCJ3ZWJwYWNrOi8vanMtdG9wLXdlYXRoZXJhcHAvLi9zcmMvbG9naWMvZmV0Y2hXZWF0aGVyQVBJLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRha2VzIHByb2Nlc3NEYXRhIGFzIGFyZ3VtZW50XHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdGF0aWNFbGVtZW50cyhkYXRhVG9EaXNwbGF5KXtcclxuICAgIGNvbnNvbGUubG9nKGRhdGFUb0Rpc3BsYXkpXHJcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJylcclxuICAgIGNvbnN0IHdlYXRoZXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyLW5hbWUnKVxyXG4gICAgY29uc3Qgd2VhdGhlckljb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyLWljb24nKVxyXG4gICAgY29uc3QgY2l0eUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNpdHktbmFtZScpXHJcbiAgICBjb25zdCB0ZW1wZXJhdHVyZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLW51bWJlcicpXHJcbiAgICBjb25zdCB0ZW1wSWNvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLWljb24nKVxyXG4gICAgY29uc3QgZmVlbHNMaWtlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmVlbHMtbGlrZScpXHJcbiAgICBjb25zdCBodW1pZGl0eUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmh1bWlkaXR5JylcclxuICAgIGNvbnN0IHdpbmRTcGVlZEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbmQtc3BlZWQnKVxyXG4gXHJcblxyXG4gICAgd2VhdGhlckVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS53ZWF0aGVyXHJcbiAgICB3ZWF0aGVySWNvbkVsLmlubmVySFRNTCA9IGA8aW1nIHNyYz1cIi4uL2ljb25zLyR7ZGF0YVRvRGlzcGxheS5pY29ufS5wbmdcIj48L2ltZz5gXHJcbiAgICBjaXR5RWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LmNpdHlOYW1lXHJcbiAgICB0ZW1wZXJhdHVyZUVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS50ZW1wZXJhdHVyZVxyXG4gICAgdGVtcEljb25FbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkuc2NhbGUgPT09ICdtZXRyaWMnID8gJ8K6QycgOiAnwrpGJ1xyXG4gICAgZmVlbHNMaWtlRWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LmZlZWxzTGlrZVxyXG4gICAgaHVtaWRpdHlFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkuaHVtaWRpdHlcclxuICAgIHdpbmRTcGVlZEVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS53aW5kU3BlZWRcclxufSIsImltcG9ydCB7IHJlbmRlclN0YXRpY0VsZW1lbnRzIH0gZnJvbSAnLi4vdmlldy9yZW5kZXJTdGF0aWNFbGVtZW50cydcclxuaW1wb3J0IHsgZmV0Y2hXZWF0aGVyQVBJIH0gZnJvbSAnLi9mZXRjaFdlYXRoZXJBUEknXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0RhdGEoY2l0eSxzY2FsZSA9ICdtZXRyaWMnKXtcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hXZWF0aGVyQVBJKGNpdHksIHNjYWxlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcbiAgICAgICAgY29uc3QgY2l0eU5hbWUgPSBkYXRhLm5hbWVcclxuICAgICAgICBjb25zdCB0ZW1wZXJhdHVyZSA9IGRhdGEubWFpbi50ZW1wXHJcbiAgICAgICAgY29uc3Qgd2VhdGhlciA9IGRhdGEud2VhdGhlclswXS5tYWluXHJcbiAgICAgICAgY29uc3QgaWNvbiA9IGRhdGEud2VhdGhlclswXS5pY29uXHJcbiAgICAgICAgY29uc3Qgd2VhdGhlckRlc2MgPSBkYXRhLndlYXRoZXJbMF0uZGVzY3JpcHRpb25cclxuICAgICAgICBjb25zdCBmZWVsc0xpa2UgPSBkYXRhLm1haW4uZmVlbHNfbGlrZVxyXG4gICAgICAgIGNvbnN0IGh1bWlkaXR5ID0gZGF0YS5tYWluLmh1bWlkaXR5XHJcbiAgICAgICAgY29uc3Qgd2luZFNwZWVkID0gZGF0YS53aW5kLnNwZWVkXHJcbiAgICAgICAgcmV0dXJueyBjaXR5TmFtZSwgdGVtcGVyYXR1cmUsIHdlYXRoZXIsIGljb24sIHdlYXRoZXJEZXNjLCBmZWVsc0xpa2UsIGh1bWlkaXR5LCB3aW5kU3BlZWQsIHNjYWxlfVxyXG5cclxuICAgIH0gY2F0Y2goZXJyKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnTm90IGZvdW5kJylcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufVxyXG5cclxuY29uc3Qgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC13ZWF0aGVyJylcclxuY29uc3Qgc2VhcmNoSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXHJcbmNvbnN0IGNoYW5nZVNjYWxlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYW5nZS1zY2FsZScpXHJcblxyXG5zZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PntcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBkYXRhVG9EaXNwbGF5ID0gIGF3YWl0IHByb2Nlc3NEYXRhKHNlYXJjaElucHV0LnZhbHVlKVxyXG4gICAgICAgIHJlbmRlclN0YXRpY0VsZW1lbnRzKGRhdGFUb0Rpc3BsYXkpXHJcbiAgICB9Y2F0Y2goZXJyKXtcclxuICAgIH1cclxufSlcclxuXHJcbmNoYW5nZVNjYWxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT57XHJcbiAgICBjb25zdCB0ZW1wSWNvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLWljb24nKVxyXG4gICAgY29uc3QgY2l0eU5hbWVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaXR5LW5hbWUnKVxyXG4gICAgaWYodGVtcEljb25FbCAmJiBjaXR5TmFtZUVsKXtcclxuICAgICAgICBjb25zdCBzY2FsZSA9IHRlbXBJY29uRWwudGV4dENvbnRlbnQgPT09ICfCukMnID8gJ2ltcGVyaWFsJyA6ICdtZXRyaWMnXHJcbiAgICAgICAgY29uc3QgZGF0YVRvRGlzcGxheSA9IGF3YWl0IHByb2Nlc3NEYXRhKGNpdHlOYW1lRWwudGV4dENvbnRlbnQsIHNjYWxlKVxyXG4gICAgICAgIHJlbmRlclN0YXRpY0VsZW1lbnRzKGRhdGFUb0Rpc3BsYXkpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufSlcclxuXHJcbiIsImV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFdlYXRoZXJBUEkgKGNpdHksc2NhbGUpe1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0ke2NpdHl9JnVuaXRzPSR7c2NhbGV9JmFwcGlkPTc2ZDUxMzZjZDU1ZDE0Yzg4ZTRkOTU0OWQwZjU1MGYyYClcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgfWNhdGNoKGVycil7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0NpdHkgbm90IGZvdW5kIScpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsicmVuZGVyU3RhdGljRWxlbWVudHMiLCJkYXRhVG9EaXNwbGF5IiwiY29uc29sZSIsImxvZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndlYXRoZXJFbCIsIndlYXRoZXJJY29uRWwiLCJjaXR5RWwiLCJ0ZW1wZXJhdHVyZUVsIiwidGVtcEljb25FbCIsImZlZWxzTGlrZUVsIiwiaHVtaWRpdHlFbCIsIndpbmRTcGVlZEVsIiwidGV4dENvbnRlbnQiLCJ3ZWF0aGVyIiwiaW5uZXJIVE1MIiwiaWNvbiIsImNpdHlOYW1lIiwidGVtcGVyYXR1cmUiLCJzY2FsZSIsImZlZWxzTGlrZSIsImh1bWlkaXR5Iiwid2luZFNwZWVkIiwiYXN5bmMiLCJwcm9jZXNzRGF0YSIsImNpdHkiLCJkYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsImpzb24iLCJlcnIiLCJmZXRjaFdlYXRoZXJBUEkiLCJuYW1lIiwibWFpbiIsInRlbXAiLCJ3ZWF0aGVyRGVzYyIsImRlc2NyaXB0aW9uIiwiZmVlbHNfbGlrZSIsIndpbmQiLCJzcGVlZCIsInNlYXJjaEJ1dHRvbiIsInNlYXJjaElucHV0IiwiY2hhbmdlU2NhbGVCdXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwidmFsdWUiLCJjaXR5TmFtZUVsIl0sInNvdXJjZVJvb3QiOiIifQ==