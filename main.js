(()=>{"use strict";async function e(e,t="metric"){try{const{data:a,data2:n}=await async function(e,t){try{const a=document.querySelector(".loader");a.classList.toggle("visible");const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),o=await n.json(),c=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${o.coord.lat}&lon=${o.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`),r=await c.json();return a.classList.toggle("visible"),{data:o,data2:r}}catch(e){return void console.log("City not found!")}}(e,t);console.log(n);const o=a.name,c=Math.floor(a.main.temp),r=a.weather[0].main,i=a.weather[0].icon,d=a.weather[0].description,l=Math.floor(a.main.feels_like),s=a.main.humidity,u=Math.floor(a.wind.speed);let m=[];for(let e=1;e<8;e++){const t=n.daily[e],a={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};m.push(a)}return console.log(m),{cityName:o,temperature:c,weather:r,icon:i,weatherDesc:d,feelsLike:l,humidity:s,windSpeed:u,scale:t,dailyForecast:m}}catch(e){return void console.log("Not found")}}function t(e){console.log(e);const t=document.querySelector(".weather-info"),a=document.querySelector(".weather-icon"),n=document.querySelector(".city-name"),o=document.querySelector(".temperature-value"),c=document.querySelector(".temperature-icon"),r=document.querySelector(".feels-like-icon"),i=document.querySelector(".feels-like-value"),d=document.querySelector(".humidity-icon"),l=document.querySelector(".humidity-value"),s=document.querySelector(".wind-speed-icon"),u=document.querySelector(".wind-speed-value"),m=document.querySelector(".change-scale-desc");t.textContent=e.weather,a.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,n.textContent=e.cityName,o.textContent=e.temperature,c.textContent="metric"===e.scale?"ºC":"ºF",r.classList.add("fa-solid"),r.classList.add("fa-temperature-high"),i.textContent=e.feelsLike+" "+c.textContent,d.classList.add("fa-solid"),d.classList.add("fa-droplet"),l.textContent=e.humidity+" %",s.classList.add("fa-solid"),s.classList.add("fa-wind"),u.textContent=e.windSpeed+" "+("metric"===e.scale?"meter/sec":"miles/hour"),m.textContent="Change to "+("metric"===e.scale?"imperial":"metric");for(let t=0;t<e.dailyForecast.length;t++){const a=document.querySelector(`.day${t+1}`),n=document.querySelector(`.day${t+1} > .max-temp`),o=document.querySelector(`.day${t+1} > .min-temp`),r=document.querySelector(`.day${t+1} > .weather-day`),i=document.querySelector(`.day${t+1} > .icon`);n.textContent=Math.floor(e.dailyForecast[t].temperatureMax)+" "+c.textContent,o.textContent=Math.floor(e.dailyForecast[t].temperatureMin)+" "+c.textContent,r.textContent=e.dailyForecast[t].weather,i.innerHTML=`<img src="../icons/${e.dailyForecast[t].icon}.png"></img>`,a.appendChild(n),a.appendChild(o),a.appendChild(r),a.appendChild(i)}}const a=document.querySelector(".fa-magnifying-glass"),n=document.querySelector("input#search"),o=document.querySelector(".change-scale"),c=document.querySelector(".temperature-icon"),r=document.querySelector(".city-name");!async function(){a.addEventListener("click",(async()=>{try{console.log(n.value),t(await e(n.value))}catch(e){}})),o.addEventListener("click",(async()=>{if(c&&r){const a="ºC"===c.textContent?"imperial":"metric";t(await e(r.textContent,a))}}))}(),async function(){t(await e("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,