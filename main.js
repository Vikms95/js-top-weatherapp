(()=>{"use strict";async function e(e,t="metric"){try{const{data:n,data2:a}=await async function(e,t){try{const n=document.querySelector(".loader");n.classList.toggle("visible");const a=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),o=await a.json(),c=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${o.coord.lat}&lon=${o.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`),r=await c.json();return n.classList.toggle("visible"),{data:o,data2:r}}catch(e){return void console.log("City not found!")}}(e,t);console.log(a,n);const o=n.name,c=n.sys.country;let r=new Date((new Date).toLocaleString("en-US",{timeZone:a.timezone}));console.log(r);const i=Math.floor(n.main.temp),d=n.weather[0].main,l=n.weather[0].icon,s=n.weather[0].description,u=Math.floor(n.main.feels_like),m=n.main.humidity,y=Math.floor(n.wind.speed);let p=[];for(let e=1;e<8;e++){const t=a.daily[e],n={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};p.push(n)}return console.log(p),{cityName:o,countryName:c,time:r,temperature:i,weather:d,icon:l,weatherDesc:s,feelsLike:u,humidity:m,windSpeed:y,scale:t,dailyForecast:p}}catch(e){return void console.log("Not found")}}function t(e){console.log(e);const t=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],a=document.querySelector(".weather-info"),o=document.querySelector(".weather-icon"),c=document.querySelector(".city-name"),r=document.querySelector(".date"),i=document.querySelector(".temperature-value"),d=document.querySelector(".temperature-icon"),l=document.querySelector(".feels-like-icon"),s=document.querySelector(".feels-like-value"),u=document.querySelector(".humidity-icon"),m=document.querySelector(".humidity-value"),y=document.querySelector(".wind-speed-icon"),p=document.querySelector(".wind-speed-value"),h=document.querySelector(".change-scale-desc");a.textContent=e.weather,o.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,c.textContent=e.cityName+", "+e.countryName,r.textContent=t[e.time.getDay()]+", "+e.time.getDate()+" - "+e.time.getHours()+":"+e.time.getMinutes(),i.textContent=e.temperature,d.textContent="metric"===e.scale?"ºC":"ºF",l.classList.add("fa-solid"),l.classList.add("fa-temperature-high"),s.textContent=e.feelsLike+" "+d.textContent,u.classList.add("fa-solid"),u.classList.add("fa-droplet"),m.textContent=e.humidity+" %",y.classList.add("fa-solid"),y.classList.add("fa-wind"),p.textContent=e.windSpeed+" "+("metric"===e.scale?"meter/sec":"miles/hour"),h.textContent="Change to "+("metric"===e.scale?"imperial":"metric");for(let a=0;a<e.dailyForecast.length;a++){const o=document.querySelector(`.day${a+1}`),c=document.querySelector(`.day${a+1} > .weekday`),r=document.querySelector(`.day${a+1} > .max-temp`),i=document.querySelector(`.day${a+1} > .min-temp`),l=document.querySelector(`.day${a+1} > .weather-day`),s=document.querySelector(`.day${a+1} > .icon`);c.innerHTML=n(e.time.getDay(),a,t),console.log(c.textContent),r.textContent=Math.floor(e.dailyForecast[a].temperatureMax)+" "+d.textContent,i.textContent=Math.floor(e.dailyForecast[a].temperatureMin)+" "+d.textContent,l.textContent=e.dailyForecast[a].weather,s.innerHTML=`<img src="../icons/${e.dailyForecast[a].icon}.png"></img>`,o.appendChild(c),o.appendChild(r),o.appendChild(i),o.appendChild(l),o.appendChild(s)}}const n=(e,t,n)=>{let a=e+t;return a>6&&(a-=7),n[a]},a=document.querySelector(".fa-magnifying-glass"),o=document.querySelector("input#search"),c=document.querySelector(".change-scale"),r=document.querySelector(".temperature-icon"),i=document.querySelector(".city-name");!async function(){a.addEventListener("click",(async()=>{try{console.log(o.value),t(await e(o.value))}catch(e){}})),c.addEventListener("click",(async()=>{if(r&&i){const n="ºC"===r.textContent?"imperial":"metric";t(await e(i.textContent,n))}}))}(),async function(){t(await e("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,