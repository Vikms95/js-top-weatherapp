(()=>{"use strict";async function e(e,t="metric"){try{const{data:n,data2:a}=await async function(e,t){try{const n=document.querySelector(".loader");n.classList.toggle("visible");const a=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=76d5136cd55d14c88e4d9549d0f550f2`),o=await a.json(),c=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${o.coord.lat}&lon=${o.coord.lon}&units=${t}&exclude=minutely,alerts&appid=76d5136cd55d14c88e4d9549d0f550f2`),r=await c.json();return n.classList.toggle("visible"),{data:o,data2:r}}catch(e){return void console.log("City not found!")}}(e,t);console.log(a,n);const o=n.name,c=n.sys.country;let r=new Date((new Date).toLocaleString("en-US",{timeZone:a.timezone}));console.log(r);const i=Math.floor(n.main.temp),d=n.weather[0].main,l=n.weather[0].icon,s=n.weather[0].description,u=Math.floor(n.main.feels_like),m=n.main.humidity,y=Math.floor(n.wind.speed);let p=[];for(let e=1;e<8;e++){const t=a.daily[e],n={temperatureMax:t.temp.max,temperatureMin:t.temp.min,weather:t.weather[0].main,icon:t.weather[0].icon};p.push(n)}return console.log(p),{cityName:o,countryName:c,time:r,temperature:i,weather:d,icon:l,weatherDesc:s,feelsLike:u,humidity:m,windSpeed:y,scale:t,dailyForecast:p}}catch(e){return void console.log("Not found")}}function t(e){console.log(e);const t=document.querySelector(".weather-info"),n=document.querySelector(".weather-icon"),a=document.querySelector(".city-name"),o=document.querySelector(".date"),c=document.querySelector(".temperature-value"),r=document.querySelector(".temperature-icon"),i=document.querySelector(".feels-like-icon"),d=document.querySelector(".feels-like-value"),l=document.querySelector(".humidity-icon"),s=document.querySelector(".humidity-value"),u=document.querySelector(".wind-speed-icon"),m=document.querySelector(".wind-speed-value"),y=document.querySelector(".change-scale-desc");t.textContent=e.weather,n.innerHTML=`<img src="../icons/${e.icon}.png"></img>`,a.textContent=e.cityName+", "+e.countryName,o.textContent=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e.time.getDay()]+", "+e.time.getDate()+" - "+e.time.getHours()+":"+e.time.getMinutes(),c.textContent=e.temperature,r.textContent="metric"===e.scale?"ºC":"ºF",i.classList.add("fa-solid"),i.classList.add("fa-temperature-high"),d.textContent=e.feelsLike+" "+r.textContent,l.classList.add("fa-solid"),l.classList.add("fa-droplet"),s.textContent=e.humidity+" %",u.classList.add("fa-solid"),u.classList.add("fa-wind"),m.textContent=e.windSpeed+" "+("metric"===e.scale?"meter/sec":"miles/hour"),y.textContent="Change to "+("metric"===e.scale?"imperial":"metric");for(let t=0;t<e.dailyForecast.length;t++){const n=document.querySelector(`.day${t+1}`),a=document.querySelector(`.day${t+1} > .max-temp`),o=document.querySelector(`.day${t+1} > .min-temp`),c=document.querySelector(`.day${t+1} > .weather-day`),i=document.querySelector(`.day${t+1} > .icon`);a.textContent=Math.floor(e.dailyForecast[t].temperatureMax)+" "+r.textContent,o.textContent=Math.floor(e.dailyForecast[t].temperatureMin)+" "+r.textContent,c.textContent=e.dailyForecast[t].weather,i.innerHTML=`<img src="../icons/${e.dailyForecast[t].icon}.png"></img>`,n.appendChild(a),n.appendChild(o),n.appendChild(c),n.appendChild(i)}}const n=document.querySelector(".fa-magnifying-glass"),a=document.querySelector("input#search"),o=document.querySelector(".change-scale"),c=document.querySelector(".temperature-icon"),r=document.querySelector(".city-name");!async function(){n.addEventListener("click",(async()=>{try{console.log(a.value),t(await e(a.value))}catch(e){}})),o.addEventListener("click",(async()=>{if(c&&r){const n="ºC"===c.textContent?"imperial":"metric";t(await e(r.textContent,n))}}))}(),async function(){t(await e("Barcelona"))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU1ZLEVBQVdRLFlBQ3JHVSxFQUFVVixZQUFjdkMsS0FBS0MsTUFBTXdCLEVBQWNYLGNBQWNDLEdBQUdNLGdCQUFrQixJQUFLVSxFQUFXUSxZQUNwR2IsRUFBVWEsWUFBY2QsRUFBY1gsY0FBY0MsR0FBR1gsUUFDdkR1QixFQUFjYSxVQUFZLHNCQUFzQmYsRUFBY1gsY0FBY0MsR0FBR1YsbUJBRS9FMEMsRUFBSUcsWUFBWUYsR0FDaEJELEVBQUlHLFlBQVlELEdBQ2hCRixFQUFJRyxZQUFZeEIsR0FDaEJxQixFQUFJRyxZQUFZdkIsSUNsRHhCLE1BQU13QixFQUFlN0UsU0FBU0MsY0FBYyx3QkFFdEM2RSxFQUFjOUUsU0FBU0MsY0FBYyxnQkFDckM4RSxFQUFvQi9FLFNBQVNDLGNBQWMsaUJBQzNDd0QsRUFBYXpELFNBQVNDLGNBQWMscUJBQ3BDK0UsRUFBYWhGLFNBQVNDLGNBQWMsZUFFbkNSLGlCQUNIb0YsRUFBYUksaUJBQWlCLFNBQVN4RixVQUNuQyxJQUNJbUIsUUFBUUMsSUFBSWlFLEVBQVlJLE9BRXhCaEMsUUFENkJ4RCxFQUFZb0YsRUFBWUksUUFFeEQsTUFBTXZFLFFBSVhvRSxFQUFrQkUsaUJBQWlCLFNBQVN4RixVQUN4QyxHQUFHZ0UsR0FBY3VCLEVBQVcsQ0FDeEIsTUFBTXBGLEVBQW1DLE9BQTNCNkQsRUFBV1EsWUFBdUIsV0FBYSxTQUU3RGYsUUFENEJ4RCxFQUFZc0YsRUFBV2YsWUFBYXJFLFFDcEI1RXVGLEdBRUEsaUJBRUlqQyxRQURnQnhELEVBQVksY0FEaEMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL2xvZ2ljL3Byb2Nlc3NEYXRhLmpzIiwid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL2xvZ2ljL2ZldGNoV2VhdGhlckFQSS5qcyIsIndlYnBhY2s6Ly9qcy10b3Atd2VhdGhlcmFwcC8uL3NyYy92aWV3L3JlbmRlclN0YXRpY0VsZW1lbnRzLmpzIiwid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL2xvZ2ljL2FkZEV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL2pzLXRvcC13ZWF0aGVyYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlclN0YXRpY0VsZW1lbnRzIH0gZnJvbSAnLi4vdmlldy9yZW5kZXJTdGF0aWNFbGVtZW50cydcclxuaW1wb3J0IHsgZmV0Y2hXZWF0aGVyQVBJIH0gZnJvbSAnLi9mZXRjaFdlYXRoZXJBUEknXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0RhdGEoY2l0eSxzY2FsZSA9ICdtZXRyaWMnKXtcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCB7ZGF0YSxkYXRhMn0gPSBhd2FpdCBmZXRjaFdlYXRoZXJBUEkoY2l0eSwgc2NhbGUpXHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YTIsZGF0YSlcclxuICAgICAgICBjb25zdCBjaXR5TmFtZSA9IGRhdGEubmFtZVxyXG4gICAgICAgIGNvbnN0IGNvdW50cnlOYW1lID0gZGF0YS5zeXMuY291bnRyeVxyXG4gICAgICAgIGxldCB0aW1lID0gbmV3IERhdGUobmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7dGltZVpvbmU6IGRhdGEyLnRpbWV6b25lfSkpXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRpbWUpXHJcbiAgICAgICAgY29uc3QgdGVtcGVyYXR1cmUgPSBNYXRoLmZsb29yKGRhdGEubWFpbi50ZW1wKVxyXG4gICAgICAgIGNvbnN0IHdlYXRoZXIgPSBkYXRhLndlYXRoZXJbMF0ubWFpblxyXG4gICAgICAgIGNvbnN0IGljb24gPSBkYXRhLndlYXRoZXJbMF0uaWNvblxyXG4gICAgICAgIGNvbnN0IHdlYXRoZXJEZXNjID0gZGF0YS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uXHJcbiAgICAgICAgY29uc3QgZmVlbHNMaWtlID0gTWF0aC5mbG9vcihkYXRhLm1haW4uZmVlbHNfbGlrZSlcclxuICAgICAgICBjb25zdCBodW1pZGl0eSA9IGRhdGEubWFpbi5odW1pZGl0eVxyXG4gICAgICAgIGNvbnN0IHdpbmRTcGVlZCA9IE1hdGguZmxvb3IoZGF0YS53aW5kLnNwZWVkKVxyXG5cclxuICAgICAgICBsZXQgZGFpbHlGb3JlY2FzdCA9IFtdXHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgOCA7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBkYXkgPSBkYXRhMi5kYWlseVtpXVxyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZU1heCA6IGRheS50ZW1wLm1heCxcclxuICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlTWluIDogZGF5LnRlbXAubWluLFxyXG4gICAgICAgICAgICAgICAgd2VhdGhlciA6IGRheS53ZWF0aGVyWzBdLm1haW4sXHJcbiAgICAgICAgICAgICAgICBpY29uIDogZGF5LndlYXRoZXJbMF0uaWNvblxyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBkYWlseUZvcmVjYXN0LnB1c2godmFsdWVzKVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhkYWlseUZvcmVjYXN0KVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7IFxyXG4gICAgICAgICAgICBjaXR5TmFtZSxcclxuICAgICAgICAgICAgY291bnRyeU5hbWUsXHJcbiAgICAgICAgICAgIHRpbWUsXHJcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlLFxyXG4gICAgICAgICAgICB3ZWF0aGVyLFxyXG4gICAgICAgICAgICBpY29uLFxyXG4gICAgICAgICAgICB3ZWF0aGVyRGVzYyxcclxuICAgICAgICAgICAgZmVlbHNMaWtlLFxyXG4gICAgICAgICAgICBodW1pZGl0eSxcclxuICAgICAgICAgICAgd2luZFNwZWVkLFxyXG4gICAgICAgICAgICBzY2FsZSxcclxuICAgICAgICAgICAgZGFpbHlGb3JlY2FzdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9IGNhdGNoKGVycil7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05vdCBmb3VuZCcpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJleHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hXZWF0aGVyQVBJIChjaXR5LHNjYWxlKXtcclxuICAgIHRyeXtcclxuICAgICAgICAvL1RPRE8gUmVmYWN0b3Igd2l0aCBQcm9taXNlLmFsbFxyXG4gICAgICAgIGNvbnN0IGxvYWRlckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvYWRlcicpXHJcbiAgICAgICAgbG9hZGVyRWwuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScpXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7Y2l0eX0mdW5pdHM9JHtzY2FsZX0mYXBwaWQ9NzZkNTEzNmNkNTVkMTRjODhlNGQ5NTQ5ZDBmNTUwZjJgKVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgICBjb25zdCByZXNwb25zZTIgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L29uZWNhbGw/bGF0PSR7ZGF0YS5jb29yZC5sYXR9Jmxvbj0ke2RhdGEuY29vcmQubG9ufSZ1bml0cz0ke3NjYWxlfSZleGNsdWRlPW1pbnV0ZWx5LGFsZXJ0cyZhcHBpZD03NmQ1MTM2Y2Q1NWQxNGM4OGU0ZDk1NDlkMGY1NTBmMmApXHJcbiAgICAgICAgY29uc3QgZGF0YTIgPSBhd2FpdCByZXNwb25zZTIuanNvbigpXHJcbiAgICAgICAgbG9hZGVyRWwuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScpXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgIGRhdGEyXHJcbiAgICAgICAgfVxyXG4gICAgfWNhdGNoKGVycil7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0NpdHkgbm90IGZvdW5kIScpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn0iLCIvLyBUYWtlcyBwcm9jZXNzRGF0YSBhcyBhcmd1bWVudFxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RhdGljRWxlbWVudHMoZGF0YVRvRGlzcGxheSl7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhVG9EaXNwbGF5KVxyXG4gICAgY29uc3QgZGF5cyA9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxyXG4gICAgY29uc3Qgd2VhdGhlckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlYXRoZXItaW5mbycpXHJcbiAgICBjb25zdCB3ZWF0aGVySWNvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlYXRoZXItaWNvbicpXHJcbiAgICBjb25zdCBjaXR5RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2l0eS1uYW1lJylcclxuICAgIGNvbnN0IHRpbWVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRlJylcclxuICAgIGNvbnN0IHRlbXBlcmF0dXJlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVtcGVyYXR1cmUtdmFsdWUnKVxyXG4gICAgY29uc3QgdGVtcEljb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wZXJhdHVyZS1pY29uJylcclxuICAgIGNvbnN0IGZlZWxzTGlrZUljb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVscy1saWtlLWljb24nKVxyXG4gICAgY29uc3QgZmVlbHNMaWtlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmVlbHMtbGlrZS12YWx1ZScpXHJcbiAgICBjb25zdCBodW1pZGl0eUljb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5odW1pZGl0eS1pY29uJylcclxuICAgIGNvbnN0IGh1bWlkaXR5RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaHVtaWRpdHktdmFsdWUnKVxyXG4gICAgY29uc3Qgd2luZFNwZWVkSWNvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbmQtc3BlZWQtaWNvbicpXHJcbiAgICBjb25zdCB3aW5kU3BlZWRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5kLXNwZWVkLXZhbHVlJylcclxuICAgIGNvbnN0IHNjYWxlVG9DaGFuZ2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGFuZ2Utc2NhbGUtZGVzYycpXHJcbiAgICAvLyBJbXBsZW1lbnQgZm9yZWNhc3QgYXBwZW5kaW5nIHdpdGggZm9yIGxvb3A/XHJcbiAgICBcclxuICAgIHdlYXRoZXJFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkud2VhdGhlclxyXG4gICAgd2VhdGhlckljb25FbC5pbm5lckhUTUwgPSBgPGltZyBzcmM9XCIuLi9pY29ucy8ke2RhdGFUb0Rpc3BsYXkuaWNvbn0ucG5nXCI+PC9pbWc+YFxyXG4gICAgY2l0eUVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS5jaXR5TmFtZSArICcsICcgKyBkYXRhVG9EaXNwbGF5LmNvdW50cnlOYW1lXHJcbiAgICB0aW1lRWwudGV4dENvbnRlbnQgPSBkYXlzW2RhdGFUb0Rpc3BsYXkudGltZS5nZXREYXkoKV0gKyAnLCAnICsgZGF0YVRvRGlzcGxheS50aW1lLmdldERhdGUoKSArICcgLSAnICsgZGF0YVRvRGlzcGxheS50aW1lLmdldEhvdXJzKCkgKyAnOicgKyBkYXRhVG9EaXNwbGF5LnRpbWUuZ2V0TWludXRlcygpXHJcbiAgICB0ZW1wZXJhdHVyZUVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS50ZW1wZXJhdHVyZVxyXG4gICAgdGVtcEljb25FbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkuc2NhbGUgPT09ICdtZXRyaWMnID8gJ8K6QycgOiAnwrpGJ1xyXG5cclxuICAgIGZlZWxzTGlrZUljb25FbC5jbGFzc0xpc3QuYWRkKCdmYS1zb2xpZCcpIFxyXG4gICAgZmVlbHNMaWtlSWNvbkVsLmNsYXNzTGlzdC5hZGQoJ2ZhLXRlbXBlcmF0dXJlLWhpZ2gnKSBcclxuICAgIGZlZWxzTGlrZUVsLnRleHRDb250ZW50ID0gZGF0YVRvRGlzcGxheS5mZWVsc0xpa2UgKyAnICcgKyB0ZW1wSWNvbkVsLnRleHRDb250ZW50XHJcbiAgICBodW1pZGl0eUljb25FbC5jbGFzc0xpc3QuYWRkKCdmYS1zb2xpZCcpIFxyXG4gICAgaHVtaWRpdHlJY29uRWwuY2xhc3NMaXN0LmFkZCgnZmEtZHJvcGxldCcpIFxyXG4gICAgaHVtaWRpdHlFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkuaHVtaWRpdHkgKyAnICUnXHJcbiAgICB3aW5kU3BlZWRJY29uRWwuY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnKSBcclxuICAgIHdpbmRTcGVlZEljb25FbC5jbGFzc0xpc3QuYWRkKCdmYS13aW5kJykgXHJcbiAgICB3aW5kU3BlZWRFbC50ZXh0Q29udGVudCA9IGRhdGFUb0Rpc3BsYXkud2luZFNwZWVkICsgJyAnICsgKGRhdGFUb0Rpc3BsYXkuc2NhbGUgPT09ICdtZXRyaWMnID8gJ21ldGVyL3NlYycgOiAnbWlsZXMvaG91cicpXHJcbiAgICBzY2FsZVRvQ2hhbmdlRWwudGV4dENvbnRlbnQgPSAnQ2hhbmdlIHRvICcgKyAoZGF0YVRvRGlzcGxheS5zY2FsZSA9PT0gJ21ldHJpYycgPyAnaW1wZXJpYWwnIDogJ21ldHJpYycpXHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhVG9EaXNwbGF5LmRhaWx5Rm9yZWNhc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZGF5JHtpICsgMX1gKVxyXG4gICAgICAgIC8vVE9ETyBJbXBsZW1lbnQgd2Vla2RheVxyXG4gICAgICAgIC8vIGNvbnN0IHdlZWtkYXkgPSAnJ1xyXG4gICAgICAgIGNvbnN0IG1heFRlbXBFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5kYXkke2kgKyAxfSA+IC5tYXgtdGVtcGApXHJcbiAgICAgICAgY29uc3QgbWluVGVtcEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmRheSR7aSArIDF9ID4gLm1pbi10ZW1wYClcclxuICAgICAgICBjb25zdCB3ZWF0aGVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZGF5JHtpICsgMX0gPiAud2VhdGhlci1kYXlgKVxyXG4gICAgICAgIGNvbnN0IHdlYXRoZXJJY29uRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZGF5JHtpICsgMX0gPiAuaWNvbmApXHJcblxyXG4gICAgICAgIG1heFRlbXBFbC50ZXh0Q29udGVudCA9IE1hdGguZmxvb3IoZGF0YVRvRGlzcGxheS5kYWlseUZvcmVjYXN0W2ldLnRlbXBlcmF0dXJlTWF4KSArICcgJyArIHRlbXBJY29uRWwudGV4dENvbnRlbnRcclxuICAgICAgICBtaW5UZW1wRWwudGV4dENvbnRlbnQgPSBNYXRoLmZsb29yKGRhdGFUb0Rpc3BsYXkuZGFpbHlGb3JlY2FzdFtpXS50ZW1wZXJhdHVyZU1pbikgKyAnICcrIHRlbXBJY29uRWwudGV4dENvbnRlbnRcclxuICAgICAgICB3ZWF0aGVyRWwudGV4dENvbnRlbnQgPSBkYXRhVG9EaXNwbGF5LmRhaWx5Rm9yZWNhc3RbaV0ud2VhdGhlclxyXG4gICAgICAgIHdlYXRoZXJJY29uRWwuaW5uZXJIVE1MID0gYDxpbWcgc3JjPVwiLi4vaWNvbnMvJHtkYXRhVG9EaXNwbGF5LmRhaWx5Rm9yZWNhc3RbaV0uaWNvbn0ucG5nXCI+PC9pbWc+YFxyXG5cclxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQobWF4VGVtcEVsKVxyXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChtaW5UZW1wRWwpXHJcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKHdlYXRoZXJFbClcclxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQod2VhdGhlckljb25FbClcclxuICAgICAgICBcclxuICAgIH1cclxufSIsImltcG9ydCB7IHByb2Nlc3NEYXRhIH0gZnJvbSAnLi9wcm9jZXNzRGF0YSdcclxuaW1wb3J0IHsgcmVuZGVyU3RhdGljRWxlbWVudHMgfSBmcm9tICcuLi92aWV3L3JlbmRlclN0YXRpY0VsZW1lbnRzJ1xyXG5cclxuXHJcbmNvbnN0IHNlYXJjaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYS1tYWduaWZ5aW5nLWdsYXNzJylcclxuLy8gRml4ZWQgdG8gYSBjaXR5IGZvciB0ZXN0aW5nXHJcbmNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQjc2VhcmNoJylcclxuY29uc3QgY2hhbmdlU2NhbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhbmdlLXNjYWxlJylcclxuY29uc3QgdGVtcEljb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wZXJhdHVyZS1pY29uJylcclxuY29uc3QgY2l0eU5hbWVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaXR5LW5hbWUnKVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCl7XHJcbiAgICBzZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PntcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlYXJjaElucHV0LnZhbHVlKVxyXG4gICAgICAgICAgICBjb25zdCBkYXRhVG9EaXNwbGF5ID0gIGF3YWl0IHByb2Nlc3NEYXRhKHNlYXJjaElucHV0LnZhbHVlKVxyXG4gICAgICAgICAgICByZW5kZXJTdGF0aWNFbGVtZW50cyhkYXRhVG9EaXNwbGF5KVxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgY2hhbmdlU2NhbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PntcclxuICAgICAgICBpZih0ZW1wSWNvbkVsICYmIGNpdHlOYW1lRWwpe1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IHRlbXBJY29uRWwudGV4dENvbnRlbnQgPT09ICfCukMnID8gJ2ltcGVyaWFsJyA6ICdtZXRyaWMnXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUb0Rpc3BsYXkgPSBhd2FpdCBwcm9jZXNzRGF0YShjaXR5TmFtZUVsLnRleHRDb250ZW50LCBzY2FsZSlcclxuICAgICAgICAgICAgcmVuZGVyU3RhdGljRWxlbWVudHMoZGF0YVRvRGlzcGxheSlcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSIsImltcG9ydCB7cHJvY2Vzc0RhdGF9IGZyb20gJy4vbG9naWMvcHJvY2Vzc0RhdGEnXHJcbmltcG9ydCB7cmVuZGVyU3RhdGljRWxlbWVudHN9IGZyb20gJy4vdmlldy9yZW5kZXJTdGF0aWNFbGVtZW50cydcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lcnMgfSBmcm9tICcuL2xvZ2ljL2FkZEV2ZW50TGlzdGVuZXJzJ1xyXG5cclxuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbihhc3luYyBmdW5jdGlvbigpe1xyXG4gICAgY29uc3QgYSA9IGF3YWl0IHByb2Nlc3NEYXRhKCdCYXJjZWxvbmEnKVxyXG4gICAgcmVuZGVyU3RhdGljRWxlbWVudHMoYSlcclxufSkoKSJdLCJuYW1lcyI6WyJhc3luYyIsInByb2Nlc3NEYXRhIiwiY2l0eSIsInNjYWxlIiwiZGF0YSIsImRhdGEyIiwibG9hZGVyRWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZXNwb25zZSIsImZldGNoIiwianNvbiIsInJlc3BvbnNlMiIsImNvb3JkIiwibGF0IiwibG9uIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImZldGNoV2VhdGhlckFQSSIsImNpdHlOYW1lIiwibmFtZSIsImNvdW50cnlOYW1lIiwic3lzIiwiY291bnRyeSIsInRpbWUiLCJEYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJ0aW1lWm9uZSIsInRpbWV6b25lIiwidGVtcGVyYXR1cmUiLCJNYXRoIiwiZmxvb3IiLCJtYWluIiwidGVtcCIsIndlYXRoZXIiLCJpY29uIiwid2VhdGhlckRlc2MiLCJkZXNjcmlwdGlvbiIsImZlZWxzTGlrZSIsImZlZWxzX2xpa2UiLCJodW1pZGl0eSIsIndpbmRTcGVlZCIsIndpbmQiLCJzcGVlZCIsImRhaWx5Rm9yZWNhc3QiLCJpIiwiZGF5IiwiZGFpbHkiLCJ2YWx1ZXMiLCJ0ZW1wZXJhdHVyZU1heCIsIm1heCIsInRlbXBlcmF0dXJlTWluIiwibWluIiwicHVzaCIsInJlbmRlclN0YXRpY0VsZW1lbnRzIiwiZGF0YVRvRGlzcGxheSIsIndlYXRoZXJFbCIsIndlYXRoZXJJY29uRWwiLCJjaXR5RWwiLCJ0aW1lRWwiLCJ0ZW1wZXJhdHVyZUVsIiwidGVtcEljb25FbCIsImZlZWxzTGlrZUljb25FbCIsImZlZWxzTGlrZUVsIiwiaHVtaWRpdHlJY29uRWwiLCJodW1pZGl0eUVsIiwid2luZFNwZWVkSWNvbkVsIiwid2luZFNwZWVkRWwiLCJzY2FsZVRvQ2hhbmdlRWwiLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImdldERheSIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJhZGQiLCJsZW5ndGgiLCJkaXYiLCJtYXhUZW1wRWwiLCJtaW5UZW1wRWwiLCJhcHBlbmRDaGlsZCIsInNlYXJjaEJ1dHRvbiIsInNlYXJjaElucHV0IiwiY2hhbmdlU2NhbGVCdXR0b24iLCJjaXR5TmFtZUVsIiwiYWRkRXZlbnRMaXN0ZW5lciIsInZhbHVlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiXSwic291cmNlUm9vdCI6IiJ9